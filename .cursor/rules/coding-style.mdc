---
globs: *.ts,*.html,*.scss,*.json
description: Coding style, formatting, and naming conventions for ngx-nova-ui library
---

# Coding Style & Naming Conventions

## Formatting Standards

### Prettier Configuration

Reference: [.prettierrc.json](mdc:.prettierrc.json)

- **Indentation**: 2 spaces
- **Quotes**: Single quotes for strings
- **Line Width**: 120 characters
- **Bracket Same Line**: `bracketSameLine: true`
- **Semicolons**: Always use semicolons

### ESLint Configuration

Reference: [eslint.config.js](mdc:eslint.config.js)

- **Angular Rules**: Enforced via `angular-eslint`
- **TypeScript Rules**: Strict type checking enabled
- **Prettier Integration**: Code formatting enforced
- **Security Rules**: No eval, no dynamic code execution

## Naming Conventions

### File Naming

- **Components**: Angular 20 style (`button.ts` not `button.component.ts`)
- **Templates**: `button.html` (if external)
- **Styles**: `button.scss`
- **Stories**: `button.stories.ts`
- **Tests**: `button.spec.ts`
- **Index**: `index.ts` for exports

### Selector Naming

- **Element Selectors**: `nova-<kebab-case>` (e.g., `nova-button`, `nova-input`)
- **Directive Selectors**: `nova<camelCase>` (e.g., `novaTooltip`, `novaValidator`)

### CSS Class Naming

- **Component Root**: `nova-<component>` (e.g., `nova-button`)
- **Modifiers**: `nova-<component>--<modifier>` (e.g., `nova-button--primary`)
- **States**: `nova-<component>--<state>` (e.g., `nova-button--disabled`)
- **Elements**: `nova-<component>__<element>` (e.g., `nova-button__icon`)

### CSS Variable Naming

- **Theme Variables**: `--nova-<property>` (e.g., `--nova-primary`, `--nova-spacing-md`)
- **Component Variables**: `--nova-<component>-<property>` (e.g., `--nova-button-height`)

## TypeScript Guidelines

### Type Safety

- **Strict Types**: Use strict type checking; prefer inference when obvious
- **Avoid Any**: Use `unknown` instead of `any` when type is uncertain
- **Explicit Returns**: Use explicit return types for functions
- **Protected Properties**: Use `protected` for template-only methods/properties
- **Readonly Signals**: Use `readonly` for signal properties

### Angular-Specific Types

```typescript
// Signal-based inputs with explicit types
readonly variant = input<ButtonVariant>('primary');
readonly size = input<ButtonSize>('medium');
readonly disabled = input(false);

// Signal-based outputs with event types
readonly clicked = output<MouseEvent>();

// Computed properties with return types
protected readonly buttonClasses = computed((): string => {
  // Implementation
});
```

## Code Organization

### Import Organization

```typescript
// Angular core imports
import { ChangeDetectionStrategy, Component, input, output, computed } from '@angular/core';
import { CommonModule } from '@angular/common';

// Third-party imports
import { SomeLibrary } from 'some-library';

// Local imports
import { SomeService } from '../services/some.service';
import { SomeType } from '../models/some.type';
```

### Component Structure

```typescript
@Component({
  selector: 'nova-button',
  imports: [CommonModule],
  templateUrl: './button.html',
  styleUrl: './button.scss',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class NovaButton {
  // Signal-based inputs
  readonly variant = input<ButtonVariant>('primary');

  // Signal-based outputs
  readonly clicked = output<MouseEvent>();

  // Computed properties
  protected readonly buttonClasses = computed(() => {
    // Implementation
  });

  // Protected methods for template use
  protected handleClick(event: MouseEvent): void {
    this.clicked.emit(event);
  }
}
```

## Lint-Staged Configuration

Reference: [package.json](mdc:package.json) lint-staged section

### Pre-commit Hooks

- **TypeScript**: ESLint + Prettier on `*.ts` files
- **Templates**: Prettier on `*.html` files
- **Styles**: Prettier on `*.scss`, `*.css` files
- **Documentation**: Prettier on `*.json`, `*.md` files

### Husky Integration

- **Husky**: Git hooks management
- **Lint-staged**: Run linters on staged files only
- **Pre-commit**: Automatic formatting and linting

## Important Notes

- **NO Attribution**: Do NOT include "Generated by Claude", "Co-authored by Claude", or similar attribution in commit messages
- **Clean Code**: Write clean, readable, and maintainable code
- **Consistency**: Follow established patterns and conventions
- **Documentation**: Document complex logic and public APIs
